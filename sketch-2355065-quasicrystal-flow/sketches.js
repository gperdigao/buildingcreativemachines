// Quasicrystal Flow Particle System
// Particles move according to a dynamic flow field generated by superimposing multiple sine waves with irrational frequencies.

let particles = [];
let numParticles = 500;
let flowFieldScale = 0.01;
let time = 0;
let timeIncrement = 0.01;
let coefficients = [];

function setup() {
  createCanvas(windowWidth, windowHeight);
  colorMode(HSB, 360, 100, 100, 100);
  
  // Initialize particles
  for (let i = 0; i < numParticles; i++) {
    particles.push(new Particle(random(width), random(height)));
  }
  
  // Initialize coefficients with irrational ratios
  for (let i = 0; i < 5; i++) {
    coefficients.push({
      k: random(0.5, 1.5) * PI,
      l: random(0.5, 1.5) * PI,
      m: random(0.5, 1.5) * PI
    });
  }
  
  background(0);
}

function draw() {
  noStroke();
  fill(0, 0, 0, 5); // Slightly fade the background to create trails
  rect(0, 0, width, height);
  
  for (let p of particles) {
    p.update();
    p.show();
  }
  
  time += timeIncrement;
}

class Particle {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.prevPos = this.pos.copy();
    this.speed = random(1, 3);
    this.color = color(random(360), 80, 100, 50);
  }
  
  update() {
    let angle = getFlowFieldAngle(this.pos.x, this.pos.y, time);
    let vel = p5.Vector.fromAngle(angle);
    vel.mult(this.speed);
    this.prevPos = this.pos.copy();
    this.pos.add(vel);
    
    // Wrap around edges
    if (this.pos.x > width) this.pos.x = 0;
    if (this.pos.x < 0) this.pos.x = width;
    if (this.pos.y > height) this.pos.y = 0;
    if (this.pos.y < 0) this.pos.y = height;
  }
  
  show() {
    stroke(this.color);
    line(this.prevPos.x, this.pos.y, this.pos.x, this.pos.y);
  }
}

function getFlowFieldAngle(x, y, t) {
  let angle = 0;
  for (let coeff of coefficients) {
    angle += sin(coeff.k * x * flowFieldScale + coeff.l * y * flowFieldScale + coeff.m * t);
  }
  return angle;
}

function mouseMoved() {
  // Influence flow field coefficients based on mouse position
  for (let coeff of coefficients) {
    coeff.k += (mouseX - width / 2) * 0.00001;
    coeff.l += (mouseY - height / 2) * 0.00001;
  }
}

function mousePressed() {
  // Add new particles at mouse position
  for (let i = 0; i < 10; i++) {
    particles.push(new Particle(mouseX, mouseY));
  }
}
